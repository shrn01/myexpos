// print "PROCESS MANAGER";
// print " ";
// print R1;
// process manager

alias funcNum R1;
alias pid R2;

// Get PID
if (funcNum == 1) then
    multipush(R1);
    R1 = 0;
    while (R1 < 16) do
        if ([PROCESS_TABLE + R1 * 16 + 4] == TERMINATED) then
            R0 = R1;
            [PROCESS_TABLE + R1 * 16 + 1] = R1;
            [PROCESS_TABLE + R1 * 16 + 4] = ALLOCATED;
            [PROCESS_TABLE + R1 * 16 + 14] = PAGE_TABLE_BASE + R1 * 20;
            [PROCESS_TABLE + R1 * 16 + 15] = 10;
            multipop(R1);
            return;
        endif;
        R1 = R1 + 1;
    endwhile;
    multipop(R1);
    R0 = -1;
    return;
endif;



// Free User Area Page
if (funcNum == 2) then
    multipush(R1,R2,R3,R4);
    R3 = 0;
    R4 = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11];
    while (R3 < 16) do
        if ([R4 * 512 + RESOURCE_TABLE_OFFSET + R3] == 1) then
            multipush(R1,R2,R3);
            R1 = 7;
            R3 = [SYSTEM_STATUS_TABLE + 1];
            R2 = [R4 * 512 + RESOURCE_TABLE_OFFSET + R3 + 1];
            call MOD_0;
            multipop(R1,R2,R3);
        endif;
        R3 = R3 + 2;
    endwhile;

    R1 = 2;
    R2 = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11];
    call MOD_2;

    multipop(R1,R2,R3,R4);
    return;
endif;



// Exit Process	
if ( funcNum == 3 ) then
    multipush(R1,R2,R3,R4,R5);

    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;

    multipop(R1,R2,R3,R4,R5);
    multipush(R1,R2);

    R1 = 2;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;
    breakpoint;

    multipop(R1,R2);

    multipush(R0,R5);
    alias prevMODE R5;
    prevMODE = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9];
    if (prevMODE != 9) then
        R0 = 1;
        while (R0 < 16) do
            if ([PROCESS_TABLE + R0 * 16 + 4] == WAIT_PROCESS && [PROCESS_TABLE + R0 * 16 + 5] == [SYSTEM_STATUS_TABLE + 1]) then
                [PROCESS_TABLE + R0 * 16 + 4] = READY;
                [PROCESS_TABLE + R0 * 16 + 5] = -1;
            endif;

            if ([PROCESS_TABLE + R0 * 16 + 2] == [SYSTEM_STATUS_TABLE + 1]) then
                [PROCESS_TABLE + R0 * 16 + 2] = -1;
            endif;

            R0 = R0 + 1;
        endwhile;

    endif;
    multipop(R0, R5);

    [PROCESS_TABLE + R2 * 16 + 4] = TERMINATED;
    return;
endif;



//free page table
if (funcNum == 4) then
    PTBR = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20;
    alias disk_map R5 ;
    disk_map = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10;

    [PTBR + 0] = -1;
    [PTBR + 1] = "0000";
    [PTBR + 2] = -1;
    [PTBR + 3] = "0000";

    alias logic_page R4;
    logic_page = 2;
    while (logic_page < 10) do
        if ([PTBR + 2 * logic_page] != -1) then
            multipush(R1,R2,R4);
            R1 = 2;
            R2 = [PTBR + logic_page * 2];
            call MOD_2;

            multipop(R1,R2,R4);
            [PTBR + logic_page * 2] = -1;
            [PTBR + logic_page * 2 + 1] = "0000";

            if (logic_page == 2 || logic_page == 3 || logic_page == 8 || logic_page == 9) then
                if ([disk_map + logic_page] != -1) then
                    multipush(R1,R2,R3,R4,R5);
                    R1 = 4;
                    R2 = [disk_map + logic_page];
                    call MOD_2;
                    [disk_map + logic_page] = -1;
                    multipop(R1,R2,R3,R4,R5);
                endif;
            endif;
        endif;
        logic_page = logic_page + 1;
    endwhile;
    return;
endif;



R0 = -1;
return;


    