// print "PROCESS MANAGER";
// print " ";
// print R1;
// process manager

alias funcNum R1;
alias pid R2;



// Free User Area Page
if (funcNum == 2) then
    multipush(R1,R2);

    R1 = 2;
    R2 = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11];
    call MOD_2;

    multipop(R1,R2);
    return;
endif;



// Exit Process	
if ( funcNum == 3 ) then
    multipush(R1,R2,R3,R4,R5);

    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;

    multipop(R1,R2,R3,R4,R5);
    multipush(R1,R2);

    R1 = 2;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;
    breakpoint;

    multipop(R1,R2);
    [PROCESS_TABLE + R2 * 16 + 4] = TERMINATED;
    return;
endif;



//free page table
if (funcNum == 4) then
    PTBR = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20;
    alias disk_map R5 ;
    disk_map = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10;

    [PTBR + 0] = -1;
    [PTBR + 1] = "0000";
    [PTBR + 2] = -1;
    [PTBR + 3] = "0000";

    alias logic_page R4;
    logic_page = 2;
    while (logic_page < 10) do
        if ([PTBR + 2 * logic_page] != -1) then
            multipush(R1,R2,R4);
            R1 = 2;
            R2 = [PTBR + logic_page * 2];
            call MOD_2;

            multipop(R1,R2,R4);
            [PTBR + logic_page * 2] = -1;
            [PTBR + logic_page * 2 + 1] = "0000";

            if (logic_page == 2 || logic_page == 3 || logic_page == 8 || logic_page == 9) then
                if ([disk_map + logic_page] != -1) then
                    multipush(R1,R2,R3,R4,R5);
                    R1 = 4;
                    R2 = [disk_map + logic_page];
                    call MOD_2;
                    [disk_map + logic_page] = -1;
                    multipop(R1,R2,R3,R4,R5);
                endif;
            endif;
        endif;
        logic_page = logic_page + 1;
    endwhile;
    return;
endif;



R0 = -1;
return;


    