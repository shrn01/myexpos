//Device Manager Module
// print "DEVICE MANAGER";
// print " ";
// breakpoint;
alias functionNum R1;
alias currentPID R2;

// Disk Store
if (functionNum == 1) then
    multipush(R1,R2,R3,R4);
    R1 = 3;
    R2 = currentPID;
    call MOD_0;
    multipop(R1,R2,R3,R4);
    [DISK_STATUS_TABLE + 1] = 0;
    [DISK_STATUS_TABLE + 2] = R3;
    [DISK_STATUS_TABLE + 3] = R4;

    store(R3,R4);

    [PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_DISK;
    backup;
    call MOD_5;
    restore;

    return;
endif;

// Disk Load	
if (functionNum == 2) then
    multipush(R1,R2,R3,R4);
    R1 = 3;
    R2 = currentPID;
    call MOD_0;
    multipop(R1,R2,R3,R4);
    [DISK_STATUS_TABLE + 1] = 0;
    [DISK_STATUS_TABLE + 2] = R3;
    [DISK_STATUS_TABLE + 3] = R4;

    load(R3,R4);

    [PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_DISK;
    backup;
    call MOD_5;
    restore;

    return;
endif;



// Terminal Write	
if (functionNum == 3) then
    backup;
    // calling acquire Terminal
    multipush(R1,R2,R3);
    R1 = 8;
    R2 = currentPID; //same thing, just for reference
    call MOD_0;
    multipop(R1,R2,R3);
    print R3;

    //releasing Terminal
    multipush(R1,R2,R3);
    R1 = 9;
    R2 = currentPID;
    call MOD_0;
    multipop(R1,R2,R3);
    restore;
    return;
endif;



// Terminal Read	
if (functionNum == 4) then
    //calling acquire Terminal
    backup;
    multipush(R1,R2,R3);
    R1 = 8;
    R2 = currentPID;
    call MOD_0;
    multipop(R1,R2,R3);
    // print "Enter ----->";
    read;

    [PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_TERMINAL;
    backup;
    call MOD_5;
    restore;
    multipush(R4);
    alias phyAddress R4;
    phyAddress = [PTBR + 2 * R3 / 512] * 512 + R3 % 512;
    [phyAddress] = [PROCESS_TABLE + (currentPID * 16) + 8];
    multipop(R4);
    restore;
    return;
endif;
