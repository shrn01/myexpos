// memory manager module
// print "IN MEMORY MANAGER";
// print " ";
// print R1;
// print R1;
// print R2;

alias funcNum R1;


// Get Free Page	
if (funcNum == 1) then
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
    if ([SYSTEM_STATUS_TABLE + 2] == 0) then
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = WAIT_MEM;
        backup;
        call MOD_5;
        restore;
    endif;
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    R1 = 76;
    while ( R1 < 127 ) do
        if ([MEMORY_FREE_LIST + R1] == 0) then
            break;
        endif;
        R1 = R1 + 1;
    endwhile;
    [MEMORY_FREE_LIST + R1] = 1;
    R0 = R1;
    // print R0;
    return;
endif;


// Release Page	
if (funcNum == 2) then 
    multipush(R1);
    [MEMORY_FREE_LIST + R2] = [MEMORY_FREE_LIST + R2] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    R1 = 0;
    while (R1 < 16) do
        if ([PROCESS_TABLE + R1 * 16 + 4] == WAIT_MEM) then
            [PROCESS_TABLE + R1 * 16 + 4] = READY;
        endif;
        R1 = R1 + 1;
    endwhile; 
    multipop(R1);
    return;
endif;


// Release Block	
if (funcNum == 4) then
    [DISK_FREE_LIST + R2] = [DISK_FREE_LIST + R2] - 1;
endif;



// Get Code Page	
if (funcNum == 5) then
    // print "Entered load code function";
    breakpoint;
    alias block R2;
    alias pid R3;
    alias index R4;
    alias disk_map R5;
    alias index_2 R6;
    index = 0;

    while (index < 10) do
        disk_map = DISK_MAP_TABLE + index * 10;
        index_2 = 4;
        while (index_2 < 8) do
            if (block == [disk_map + index_2]) then
                R0 = [PAGE_TABLE_BASE + index * 20 + index_2 * 2];
                if (R0 != -1) then
                    [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
                    return;
                endif;
            endif;
            index_2 = index_2 + 1;
        endwhile;
        index = index + 1;
    endwhile;
    breakpoint;
    multipush(R2);
    R1 = 1;
    call MOD_2;
    multipop(R2);
    R1 = 2;
    R4 = block;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = R0;
    multipush(R3);

    call MOD_4;
    multipop(R3);
    R0 = R3;
    breakpoint;
    return;

endif;
    
R0 = -1;
return;