// breakpoint;

//setting mode
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9 ] = -1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;
// multipush(EIP);
backup;
// print EIP;
// print SP;
// print "in exception handler";

PTBR = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20;

if (EC != 0 || ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] == PTLR * 512 - 1)) then
    print "Some error has occured, so exiting";
    print "EC";
    if (EC == 1) then
        print "Illegal Instruction";
        breakpoint;
    endif;
    if (EC == 2) then
        print "Illegal Mem Access";
        breakpoint;
    endif;
    if (EC == 3) then
        print "Arithmetic error";
        breakpoint;
    endif;
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;
    call MOD_5;
    restore;
    return;
endif;

if (EC == 0) then
    if (EPN == 4 || EPN == 5 || EPN == 6 || EPN == 7) then
        R1 = 5;
        R2 = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + EPN];
        print EPN;
        print R2;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        backup;

        call MOD_2;
        [PTBR + EPN * 2] = R0;
        [PTBR + EPN * 2 + 1] = "1100";
        restore;
        
    endif;

    if (EPN == 2) then
        backup;
        R1 = 1;
        call MOD_2;

        [PTBR + 4] = R0;
        [PTBR + 5] = "1110";
        
        R1 = 1;
        call MOD_2;

        [PTBR + 6] = R0;
        [PTBR + 7] = "1110";
        restore;
    endif;
    restore;
    // print EIP;
    // print SP;
    // multipop(EIP);
    multipush(R1,R2);
    R1 = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] + 1;
    R2 = [PTBR + 2 * (R1 / 512)] * 512 + R1 % 512;
    [R2] = EIP;
    // print R2;
    // print EIP;
    multipop(R1,R2);
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] + 1;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9 ] = 0;
    breakpoint;
    ireturn;
endif;
