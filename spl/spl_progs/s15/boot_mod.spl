//loading init
loadi(65,7);
loadi(66,8);

//loading inode table to memory
loadi(59,3);
loadi(60,4);

//loading disk interrupt 
loadi(6,19);
loadi(7,20);

// //loading executable
// loadi(83,69);

// //loading prime code
// loadi(86,70);

//exception handler
loadi(2,15);
loadi(3,16);

//expOS library
loadi(63,13);
loadi(64,14);

//console interrupt
loadi(8,21);
loadi(9,22);

//timer interrupt
loadi(4,17);
loadi(5,18);

//int 6 
loadi(14,27);
loadi(15,28);

//int 7 i.e. write to console
loadi(16,29);
loadi(17,30);

//loading int9
loadi(20,33);
loadi(21,34);

//int 10 i.e. exit
loadi(22,35);
loadi(23,36);

//module 0 (Resource Manager)
loadi(40,53);
loadi(41,54);

//module 1 (Process manager)
loadi(42,55);
loadi(43,56);

//module 2 (Memory manager)
loadi(44,57);
loadi(45,58);

//module 4 (Device Manager)
loadi(48,61);
loadi(49,62);


//module 5 ( scheduler )
loadi(50,63);
loadi(51,64);

//terminal is free
[TERMINAL_STATUS_TABLE] = 0;

//setting wait mem count and mem free count
[SYSTEM_STATUS_TABLE + 2] = 45;
[SYSTEM_STATUS_TABLE + 3] = 0;

//disk status 
[DISK_STATUS_TABLE] = 0;

alias index R0;
index = 2;
while ( index < 16 ) do
	[PROCESS_TABLE + ( 16 * index ) + 4] = TERMINATED;
	index = index + 1;
endwhile;

index = 0;

// used by expOS
while ( index < 76) do
	[MEMORY_FREE_LIST + index] = 1;
	index = index + 1;
endwhile;

//used by IDLE and INIT
while (index < 83) do
	[MEMORY_FREE_LIST + index] = 1;
	index = index + 1;
endwhile;

while (index < 128) do
	[MEMORY_FREE_LIST + index] = 0;
	index = index + 1;
endwhile;

//init
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 80;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;

// per process resource table for init
index = 81 * 512 - 16;
alias total R1;
R1 = 81 * 512;

while (index < R1) do
	[index] = -1;
	index = index + 1;
endwhile;

//setting stack for init
[76 * 512] = [65*512 + 1];


// //even program
// PTBR = PAGE_TABLE_BASE + 40;
// PTLR = 10;

// [PTBR+0] = 63;
// [PTBR+1] = "0100";
// [PTBR+2] = 64;
// [PTBR+3] = "0100";

// [PTBR+4] = -1;
// [PTBR+5] = "0000";
// [PTBR+6] = -1;
// [PTBR+7] = "0000";

// [PTBR+8] = 83;
// [PTBR+9] = "0100";
// [PTBR+10] = -1;
// [PTBR+11] = "0000";
// [PTBR+12] = -1;
// [PTBR+13] = "0000";
// [PTBR+14] = -1;
// [PTBR+15] = "0000";

// [PTBR+16] = 84;
// [PTBR+17] = "0110";
// [PTBR+18] = -1;
// [PTBR+19] = "0000";

// [PROCESS_TABLE + 32 + 1] = 2;
// [PROCESS_TABLE + 32 + 4] = CREATED;
// [PROCESS_TABLE + 32 + 11] = 85;
// [PROCESS_TABLE + 32 + 12] = 0;
// [PROCESS_TABLE + 32 + 13] = 8*512;
// [PROCESS_TABLE + 32 + 14] = PAGE_TABLE_BASE + 40;
// [PROCESS_TABLE + 32 + 15] = 10;


// //setting stack for executable
// [84 * 512] = [83*512 + 1];


// //prime program
// PTBR = PAGE_TABLE_BASE + 60;
// PTLR = 10;

// [PTBR+0] = 63;
// [PTBR+1] = "0100";
// [PTBR+2] = 64;
// [PTBR+3] = "0100";

// [PTBR+4] = -1;
// [PTBR+5] = "0000";
// [PTBR+6] = -1;
// [PTBR+7] = "0000";

// [PTBR+8] = 86;
// [PTBR+9] = "0100";
// [PTBR+10] = -1;
// [PTBR+11] = "0000";
// [PTBR+12] = -1;
// [PTBR+13] = "0000";
// [PTBR+14] = -1;
// [PTBR+15] = "0000";

// [PTBR+16] = 87;
// [PTBR+17] = "0110";
// [PTBR+18] = -1;
// [PTBR+19] = "0000";

// [PROCESS_TABLE + 48 + 1] = 3;
// [PROCESS_TABLE + 48 + 4] = CREATED;
// [PROCESS_TABLE + 48 + 11] = 88;
// [PROCESS_TABLE + 48 + 12] = 0;
// [PROCESS_TABLE + 48 + 13] = 8*512;
// [PROCESS_TABLE + 48 + 14] = PAGE_TABLE_BASE + 60;
// [PROCESS_TABLE + 48 + 15] = 10;


// //setting stack for prime 
// [87 * 512] = [86*512 + 1];

return;