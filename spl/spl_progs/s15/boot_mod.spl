//loading init
loadi(65,7);

//loading shell
loadi(67,9);
loadi(68,10);

//loading inode table to memory
loadi(59,3);
loadi(60,4);

// Root File
loadi(62,5);

// Disk Free List
loadi(61,2);

//loading disk interrupt 
loadi(6,19);
loadi(7,20);

//exception handler
loadi(2,15);
loadi(3,16);

//expOS library
loadi(63,13);
loadi(64,14);

//console interrupt
loadi(8,21);
loadi(9,22);

//timer interrupt
loadi(4,17);
loadi(5,18);

// int 4 i.e. File create and delete
loadi(10,23);
loadi(11,24);

//int 5 
loadi(12,25);
loadi(13,26);

//int 6 
loadi(14,27);
loadi(15,28);

//int 7 i.e. write to console
loadi(16,29);
loadi(17,30);

// int 8 i.e fork Call
loadi(18,31);
loadi(19,32);

//loading int9 i.e Exec Call
loadi(20,33);
loadi(21,34);

//int 10 i.e. exit
loadi(22,35);
loadi(23,36);

// int 11 i.e. int 11
loadi(24,37);
loadi(25,38);

//int 12 i.e. logout
loadi(26,39);
loadi(27,40);

//int 13 with semaphores and stuff
loadi(28,41);
loadi(29,42);

//int 14 with semlock and semunlock
loadi(30,43);
loadi(31,44);

//int 15 i.e. shutdown
loadi(32,45);
loadi(33,46);

//int 16 i.e. user ones
loadi(34,47);
loadi(35,48);

//int 17 i.e. login
loadi(36,49);
loadi(37,50);

//module 0 (Resource Manager)
loadi(40,53);
loadi(41,54);

//module 1 (Process manager)
loadi(42,55);
loadi(43,56);

//module 2 (Memory manager)
loadi(44,57);
loadi(45,58);

//module 3 (File Manager)
loadi(46,59);
loadi(47,60);

//module 4 (Device Manager)
loadi(48,61);
loadi(49,62);


//module 5 ( scheduler )
loadi(50,63);
loadi(51,64);




//terminal is free
[TERMINAL_STATUS_TABLE] = 0;






//setting wait mem count and mem free count
[SYSTEM_STATUS_TABLE] = 0;
[SYSTEM_STATUS_TABLE + 2] = 47;
[SYSTEM_STATUS_TABLE + 3] = 0;





//disk status 
[DISK_STATUS_TABLE] = 0;


alias index R0;

// Memory Free List
index = 0;

// used by expOS, IDLE, INIT and shell
while ( index < 81) do
	[MEMORY_FREE_LIST + index] = 1;
	index = index + 1;
endwhile;


while (index < 128) do
	[MEMORY_FREE_LIST + index] = 0;
	index = index + 1;
endwhile;




// let's initialise the SEMAPHORE_TABLE and OPEN_FILE_TABLE

index = 0;
while (index < 32) do
	R7 = SEMAPHORE_TABLE + index * 4;
	[R7] = -1;
	[R7 + 1] = 0;

	R7 = OPEN_FILE_TABLE + index * 4;
	[R7] = -1;
	[R7 + 1] = -1;
	[R7 + 2] = -1;
	index = index + 1;
endwhile;




// File Status Table
index = 0;
while (index < 60) do
	[FILE_STATUS_TABLE + index * 4] = -1;
	[FILE_STATUS_TABLE + index * 4 + 1] = -1;
	index = index + 1;
endwhile;




// Buffer Table
index = 0;
while (index < 4) do
	R7 = BUFFER_TABLE + index * 4;
	[R7] = -1;
	[R7 + 1] = 0;
	[R7 + 2] = -1;
	index = index + 1;
endwhile;



// Setting Page Tables
//init
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";


alias ProcessTable R2;
ProcessTable = PROCESS_TABLE + 16;

[ProcessTable + 1] = 1;
[ProcessTable + 4] = CREATED;
[ProcessTable + 11] = 80;
[ProcessTable + 12] = 0;
[ProcessTable + 13] = 8*512;
[ProcessTable + 14] = PAGE_TABLE_BASE + 20;
[ProcessTable + 15] = 10;


//disk map entries for init process

alias DiskMap R3;
DiskMap = DISK_MAP_TABLE + 10;

[DiskMap] = 13;
[DiskMap + 1] = 14;
[DiskMap + 2] = -1;
[DiskMap + 3] = -1;
[DiskMap + 4] = 7;
[DiskMap + 5] = 8;
[DiskMap + 6] = -1;
[DiskMap + 7] = -1;
[DiskMap + 8] = -1;
[DiskMap + 9] = -1;




// shell program
PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

[PTBR + 8] = 67;
[PTBR + 9] = "0100";
[PTBR + 10] = 68;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

[PTBR + 16] = 78;
[PTBR + 17] = "0110";
[PTBR + 18] = 79;
[PTBR + 19] = "0110";



ProcessTable = PROCESS_TABLE + 32;

[ProcessTable + 1] = 2;
[ProcessTable + 2] = 1;
[ProcessTable + 4] = TERMINATED;
[ProcessTable + 11] = 77;
[ProcessTable + 12] = 0;
[ProcessTable + 13] = 8 * 512;
[ProcessTable + 14] = PAGE_TABLE_BASE + 40;
[ProcessTable + 15] = 10;


//disk map entries for shell process

DiskMap = DISK_MAP_TABLE + 20;
[DiskMap] = 13;
[DiskMap + 1] = 14;
[DiskMap + 2] = -1;
[DiskMap + 3] = -1;
[DiskMap + 4] = 9;
[DiskMap + 5] = 10;
[DiskMap + 6] = -1;
[DiskMap + 7] = -1;
[DiskMap + 8] = -1;
[DiskMap + 9] = -1;


//setting stack for shell
[78 * 512] = [67 * 512 + 1];



// per process resource table for shell
index = 16;

while (index > 0) do
	[78 * 512 - index] = -1;
	index = index - 1;
endwhile;

//setting stack for init
[66 * 512] = [65 * 512 + 1];

return;