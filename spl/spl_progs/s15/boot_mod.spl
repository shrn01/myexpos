//loading init
loadi(65,7);
loadi(66,8);

//loading inode table to memory
loadi(59,3);
loadi(60,4);

// Root File
loadi(62,5);

//loading disk interrupt 
loadi(6,19);
loadi(7,20);

//exception handler
loadi(2,15);
loadi(3,16);

//expOS library
loadi(63,13);
loadi(64,14);

//console interrupt
loadi(8,21);
loadi(9,22);

//timer interrupt
loadi(4,17);
loadi(5,18);

// int 4 i.e. File create and delete
loadi(10,23);
loadi(11,24);

//int 6 
loadi(14,27);
loadi(15,28);

//int 7 i.e. write to console
loadi(16,29);
loadi(17,30);

// int 8 i.e fork Call
loadi(18,31);
loadi(19,32);

//loading int9 i.e Exec Call
loadi(20,33);
loadi(21,34);

//int 10 i.e. exit
loadi(22,35);
loadi(23,36);

// int 11 i.e. int 11
loadi(24,37);
loadi(25,38);

//int 13 with semaphores and stuff
loadi(28,41);
loadi(29,42);

//int 14 with semlock and semunlock
loadi(30,43);
loadi(31,44);

//int 15 i.e. shutdown
loadi(32,45);
loadi(33,46);

//module 0 (Resource Manager)
loadi(40,53);
loadi(41,54);

//module 1 (Process manager)
loadi(42,55);
loadi(43,56);

//module 2 (Memory manager)
loadi(44,57);
loadi(45,58);

//module 4 (Device Manager)
loadi(48,61);
loadi(49,62);


//module 5 ( scheduler )
loadi(50,63);
loadi(51,64);




//terminal is free
[TERMINAL_STATUS_TABLE] = 0;






//setting wait mem count and mem free count
[SYSTEM_STATUS_TABLE + 2] = 45;
[SYSTEM_STATUS_TABLE + 3] = 0;





//disk status 
[DISK_STATUS_TABLE] = 0;



// Setting all processes to TERMINATED
alias index R0;
index = 2;
while ( index < 16 ) do
	[PROCESS_TABLE + ( 16 * index ) + 4] = TERMINATED;
	index = index + 1;
endwhile;



// Memory Free List
index = 0;

// used by expOS
while ( index < 76) do
	[MEMORY_FREE_LIST + index] = 1;
	index = index + 1;
endwhile;

//used by IDLE and INIT
while (index < 83) do
	[MEMORY_FREE_LIST + index] = 1;
	index = index + 1;
endwhile;

while (index < 128) do
	[MEMORY_FREE_LIST + index] = 0;
	index = index + 1;
endwhile;




// let's initialise the SEMAPHORE_TABLE

index = 0;
while (index < 32) do
	[SEMAPHORE_TABLE + index * 4] = -1;
	[SEMAPHORE_TABLE + index * 4 + 1] = 0;
	index = index + 1;
endwhile;




// File Status Table
index = 0;
while (index < 60) do
	[FILE_STATUS_TABLE + index * 4] = -1;
	[FILE_STATUS_TABLE + index * 4 + 1] = -1;
	index = index + 1;
endwhile;




// Buffer Table
index = 0;
while (index < 4) do
	[BUFFER_TABLE + index * 4] = -1;
	[BUFFER_TABLE + index * 4 + 1] = 0;
	[BUFFER_TABLE + index * 4 + 2] = -1;
	index = index + 1;
endwhile;


// Setting Page Tables
//init
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 80;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;


//disk map entries for init process
[DISK_MAP_TABLE + 10] = 13;
[DISK_MAP_TABLE + 10 + 1] = 14;
[DISK_MAP_TABLE + 10 + 2] = -1;
[DISK_MAP_TABLE + 10 + 3] = -1;
[DISK_MAP_TABLE + 10 + 4] = 7;
[DISK_MAP_TABLE + 10 + 5] = 8;
[DISK_MAP_TABLE + 10 + 6] = -1;
[DISK_MAP_TABLE + 10 + 7] = -1;
[DISK_MAP_TABLE + 10 + 8] = -1;
[DISK_MAP_TABLE + 10 + 9] = -1;



// per process resource table for init
index = 81 * 512 - 16;
alias total R1;
R1 = 81 * 512;

while (index < R1) do
	[index] = -1;
	index = index + 1;
endwhile;

//setting stack for init
[76 * 512] = [65*512 + 1];

return;